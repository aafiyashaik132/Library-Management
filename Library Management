#include <stdio.h>
#include <string.h>

#define MAX_BOOKS 5
#define MAX_TITLE 100

// Structure to represent a book
struct Book {
    int id;
    char title[MAX_TITLE];
    char author[MAX_TITLE];
};

// Function to display all books
void displayBooks(struct Book books[], int count) {
    printf("\nBooks in the Library:\n");
    for (int i = 0; i < count; i++) {
        printf("ID: %d, Title: %s, Author: %s\n", books[i].id, books[i].title, books[i].author);
    }
}

// Function to add a book
void addBook(struct Book books[], int *count) {
    if (*count < MAX_BOOKS) {
        printf("\nEnter Book ID: ");
        scanf("%d", &books[*count].id);
        getchar();  // To consume newline character left by scanf
        printf("Enter Book Title: ");
        fgets(books[*count].title, MAX_TITLE, stdin);
        books[*count].title[strcspn(books[*count].title, "\n")] = '\0';  // Remove newline
        printf("Enter Book Author: ");
        fgets(books[*count].author, MAX_TITLE, stdin);
        books[*count].author[strcspn(books[*count].author, "\n")] = '\0';  // Remove newline
        (*count)++;
    } else {
        printf("Library is full!\n");
    }
}

// Function to search a book by title
void searchBook(struct Book books[], int count, char title[]) {
    for (int i = 0; i < count; i++) {
        if (strstr(books[i].title, title)) {
            printf("Found: ID: %d, Title: %s, Author: %s\n", books[i].id, books[i].title, books[i].author);
            return;
        }
    }
    printf("Book not found.\n");
}

int main() {
    struct Book books[MAX_BOOKS];
    int count = 0;
    int choice;
    char searchTitle[MAX_TITLE];

    do {
        printf("\nLibrary Management System\n");
        printf("1. Add Book\n");
        printf("2. Display Books\n");
        printf("3. Search Book by Title\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();  // Consume newline character

        switch (choice) {
            case 1:
                addBook(books, &count);
                break;
            case 2:
                displayBooks(books, count);
                break;
            case 3:
                printf("Enter title to search: ");
                fgets(searchTitle, MAX_TITLE, stdin);
                searchTitle[strcspn(searchTitle, "\n")] = '\0';  // Remove newline
                searchBook(books, count, searchTitle);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}
